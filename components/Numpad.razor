@using WebServiceApiRest.Models
@using UserBlazorApp.Services;

<div class="contenedornumpad">
    <div class="contenedorvisornumpad">
        <label for="visornumpad">Selección de mesa</label>
        <input type="text" id="visornumpad" value="@value" />
    </div>
    <div class="numpads">
        <div class="row justify-content-md-center rownumpad">
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(7)">7</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(8)">8</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(9)">9</button>
            </div>
            <div class="col-auto colnumpad">
                @* llamamos al evento callback numMesaToIndex, que se encarga de enviar los números tecleados (parseados a int en vez de string) *@
                <button class="numpadlargebutton" @onclick="@(() => numMesaToIndex.InvokeAsync(Int32.Parse(value)))">S</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpad">
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(4)">4</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(5)">5</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(6)">6</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadlargebutton">PREC</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpad">
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(1)">1</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(2)">2</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(3)">3</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadlargebutton">A</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpad">
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(0)">0</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(-3)">,</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(-2)">C</button>
            </div>
            <div class="col-auto colnumpad">
                <button class="numpadlargebutton" @onclick="e => typeKey(-1)">&#60;&#61;</button>
            </div>
        </div>
    </div>
</div>

@code {
    // parametro que se pasa al componente padre (index)
    [Parameter]
    public EventCallback<int> numMesaToIndex { get; set; }

    // variable que almacena el número que se escribe con los botones de numpad
    private string value = "";

    private void typeKey(int key)
    {
        switch (key)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                if (value == "0")
                {
                    value = "";
                }
                value += key.ToString().Trim();
                break;
            case -1:
                if (value.Length > 0)
                {
                    string newvalue = "";
                    newvalue = value.Remove(value.LastIndexOf("")).Trim();
                    value = newvalue;
                }
                break;
            case -2:
                value = "";
                break;
            case -3:
                //agregar condición que impida más de un , en el string
                if (value.Substring(value.Length - 1) != ",")
                {
                    value += ",";
                }
                break;
        }
    }
}
