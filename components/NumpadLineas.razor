@* El componente NumpadLineas es un teclado numérico utilizado para que el usuario escriba la cantidad o el precio
    del artículo seleccionado, y así poder modificarlo. Este componente solo se encuentra operativo una vez que
    se ha escogido una mesa, y se muestra clicando en el botón de la derecha de cerrar sesión*@
<div class="contenedornumpad">
    <div class="contenedorvisornumpad">
        <label for="visornumpad">Seleccionar operación</label>
        <input type="text" id="visornumpad" value="@value" disabled />
    </div>
    <div class="numpads">
        <div class="row justify-content-md-center rownumpad">
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(7)">7</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(8)">8</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(9)">9</button>
            </div>
            <div class="colnumpad">
                <button class="numpadlargebutton">TRSP</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpad">
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(4)">4</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(5)">5</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(6)">6</button>
            </div>
            <div class="colnumpad">
                <button class="numpadlargebutton" @onclick="checkAndSendCodebar">A</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpad">
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(1)">1</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(2)">2</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(3)">3</button>
            </div>
            <div class="colnumpad">
                <button class="numpadlargebutton" @onclick="checkAndSendCantidad">CANT</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpad">
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(0)">0</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(-2)">,</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" style="color:red" @onclick="e => typeKey(-1)">C</button>
            </div>
            <div class="colnumpad">
                <button class="numpadlargebutton" @onclick="checkAndSendPrecio">PREC</button>
            </div>
        </div>
    </div>
</div>

@code {
    // parametro cantidad que se pasa al componente padre (index)
    [Parameter]
    public EventCallback<int> cantidadToIndex { get; set; }
    // parametro precio que se pasa al componente padre (index)
    [Parameter]
    public EventCallback<int> precioToIndex { get; set; }
    // parametro codebar que se pasa al componente padre (index)
    [Parameter]
    public EventCallback<string> codebarToIndex { get; set; }

    // variable que almacena el número que se escribe con los botones de numpad
    private string value = "";

    //OnParametersSetAsync se ejecuta al iniciar el componente o cada vez que se actualiza su estado
    protected override async Task OnParametersSetAsync()
    {
        // cada vez que Numpad le manda un value al padre, vuelve a asignar un valor vacío a value
        value = "";
        await base.OnParametersSetAsync();
    }

    // según el valor de key, typeKey hará una acción u otra
    private void typeKey(int key)
    {
        switch (key)
        {
            // key 0-9: escribe en el input el valor de key
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                if (value == "0")
                {
                    value = "";
                }
                value += key.ToString().Trim();
                break;
            // key -1: borra todos los elementos del input
            case -1:
                value = "";
                break;
            // key -2: escribe una coma en el input -> ,
            case -2:
                if (value.Substring(value.Length - 1) != ",")
                {
                    value += ",";
                }
                break;
        }
    }

    // comprueba el valor cantidad que se va a enviar, y si es válido, procede a pasarlo a Index
    private void checkAndSendCantidad()
    {
        if (value != "")
        {
            cantidadToIndex.InvokeAsync(Int32.Parse(value));
        }
    }

    // comprueba el valor precio que se va a enviar, y si es válido, procede a pasarlo a Index
    private void checkAndSendPrecio()
    {
        // comprueba que el valor que se envía al componente padre no sea una cadena vacía
        if (value != "")
        {
            precioToIndex.InvokeAsync(Int32.Parse(value));
        }
    }

    // comprueba el valor codebar que se va a enviar, y si es válido, procede a pasarlo a Index
    private void checkAndSendCodebar()
    {
        // comprueba que el valor que se envía al componente padre no sea una cadena vacía
        if (value != "")
        {
            codebarToIndex.InvokeAsync((value));
        }
    }
}
