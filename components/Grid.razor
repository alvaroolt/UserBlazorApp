@using WebServiceApiRest.Models
@using UserBlazorApp.Services;
@inject BrowserService Service;

<SfGrid DataSource="ldocumento" Height="100%">
    <GridPageSettings PageSize="1000"></GridPageSettings>
    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" PersistSelection="true"></GridSelectionSettings>
    <GridEditSettings NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
    <GridTemplates>
        <EmptyRecordTemplate>
            <span></span>
        </EmptyRecordTemplate>
    </GridTemplates>
    <GridEvents RowSelected="RowSelectHandler" TValue="Ldocumentos"></GridEvents>
    <GridColumns>
        <GridColumn Field="@(nameof(Ldocumentos.ldoc_cantidad))" AutoFit="true" />
        <GridColumn Field="@(nameof(Ldocumentos.ldoc_descripcion))" Width="90%" />
    </GridColumns>
</SfGrid>
@*<p>@height</p>
<button @onclick="getHeight">Get Dimensions</button>*@

@code {
    [Parameter]
    public EventCallback<Ldocumentos> ldocumentoToIndex { get; set; }

    [Parameter]
    public IEnumerable<Documentos> documento { get; set; }
    public IEnumerable<Ldocumentos> ldocumento { get; set; }

    //private int height { get; set; }

    //private async Task getHeight()
    //{
    //    var dimension = await Service.GetDimensions();
    //    height = dimension.Height;
    //}

    //protected override async Task OnInitializedAsync()
    //{
    //    await getHeight();
    //}

    //OnParametersSetAsync se ejecuta al iniciar el componente o cada vez que se actualiza su estado
    protected override async Task OnParametersSetAsync()
    {
        if (documento != null)
        {
            await getDocumentos(documento);
        }
        await base.OnParametersSetAsync();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await getHeight();
    //    }
    //}

    public async Task getDocumentos(IEnumerable<Documentos> documentoCode)
    {
        foreach (var doc in documentoCode)
        {
            ldocumento = doc.listdoc;
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<Ldocumentos> args)
    {
        var CustomerIDValue = args.Data;
        ldocumentoToIndex.InvokeAsync(CustomerIDValue);
    }
}
