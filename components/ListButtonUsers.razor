@*<h3>ListButton</h3>*@
@*@inherits ListUserBase*@
@using WebServiceApiRest.Models;
@using UserBlazorApp.Services;
@*@implements IDisposable*@
@if (_isVisible)
{
    @if (Users == null)
    {
        <text>Cargando...</text>
    }
    else
    {
        @*<div class="card-deck" style="justify-content: space-around">*@
        @foreach (User u in Users)
        {
            @if (cont >= 4)
            {
                @*<div class="row">*@
                    <div class="col text-center" style="margin: 1%">
                        <div style="text-align:center">
                            <SfButton type="button" href='#' class="btn btn-primary p-4 rounded-0" name="@u.id" @onclick="e => showAccounts(u.id)">@u.name</SfButton>
                        </div>
                    </div>
                @*</div>*@
            }
        }
        @*</div>*@
    }
}
<ListButtonAccounts @ref="listaccounts" Id="selectedId"></ListButtonAccounts>

@code {

    [Inject]
    public IServiceUser ServiceUser { get; set; }
    public IEnumerable<User> Users { get; set; }

    [Parameter]
    public int Id { get; set; }
    //private int _id { get; set; }
    private bool _isVisible = true;
    private int selectedId = -1;
    private int cont = 4;

    ListButtonAccounts listaccounts;

    //protected override async Task OnInitializedAsync()
    //{

    //}

    protected override async Task OnParametersSetAsync()
    {
        await getUsers(Id);
        await base.OnParametersSetAsync();
    }

    public async Task getUsers(int idCode)
    {
        if (Id == 0)
        {
            Users = (await ServiceUser.DameUsers()).ToList();
        }
        else
        {
            Users = (await ServiceUser.DameUser(Id)).ToList();
        }
    }

    private void showAccounts(int num)
    {
        _isVisible = !_isVisible;
        selectedId = num;
    }

    //public void Dispose() =>
}
