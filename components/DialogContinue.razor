@using Syncfusion.Blazor.Popups

@* DialogContinue es un componente modal utilizado para la operación de eliminar el documento(pedido) de la mesa.
    Al clicar en borrar documento, aparecerá un mensaje emergente avisando de si estás seguro de continuar.
    Tiene las opciones de cancelar y seguir adelante.*@

@* solo visible si isDialogVisible es true *@
<SfDialog MinHeight="180px" Width="350px" @bind-Visible="@isDialogVisible" IsModal="true">
    <DialogTemplates>
        <Header>
            @headerMensaje
        </Header>
        <Content>
            @mensaje
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancelar" OnClick="(() => OnDialogBtnClick(false))" />
        <DialogButton Content="Continuar" OnClick="(() => OnDialogBtnClick(true))" />
    </DialogButtons>
</SfDialog>

@code {
    //dialogContinue recibe el parámetro headerMensaje, el cual es un string para escribir en el header del dialog
    [Parameter]
    public string headerMensaje { get; set; }
    //dialogContinue recibe el parámetro mensaje, el cual es un string para escribir en el body del dialog
    [Parameter]
    public string mensaje { get; set; }
    // info que se le pasa al componente padre (en este caso un boolean para continuar con la operación)
    [Parameter]
    public EventCallback<bool> continueToFather { get; set; }
    // asigna como valor inicial el si es visible en true
    [Parameter]
    public bool isDialogVisible { get; set; } = true;

    // método que le asigna a isDialogVisible el valor false y se lo pasa a Index
    private void OnDialogBtnClick(bool continueTask)
    {
        // continueTask devuelve true o false y se lo asigna a continueToFather, para pasar el dato al componente padre
        if (continueTask)
        {
            continueToFather.InvokeAsync(bool.Parse("true"));
        }
        else
        {
            continueToFather.InvokeAsync(bool.Parse("false"));
        }
        // oculta dialog
        isDialogVisible = false;
    }
}
