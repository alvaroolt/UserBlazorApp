@page "/index"
@*hacemos referencia a los componentes*@
@using UserBlazorApp.components;
@using WebServiceApiRest.Models;
@using WebServiceApiRest.Models.Response;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<AuthorizeView>
    <Authorized>
        <div class="contenedorgridandmenubuttons">
            <div class="contenedorgrid">
                @*<Grid documento="DocumentosEnum" ldocumentoToIndex="obtenerLdocumentoFromGrid"></Grid>*@
                <Grid documento="DocumentosEnum"></Grid>
            </div>
            <div class="contenedormenubuttons">
                <div class="container border">
                    <div class="contenedorvisores">
                        <p class="visorprecio">@nombreUsuario</p>
                        <p class="visorprecio">@precioTotal€</p>
                    </div>
                    <div class="row justify-content-md-center rowmenubuttons">
                        <div class="col-auto colmenubutton">
                            @*<button class="menubutton" @onclick="e => deleteDocumento(numMesa)"><img class="menuimg" src="images/deleteLine.png" /></button>*@ @*evitar el ~/*@
                            <button class="menubutton"><img class="menuimg" src="images/deleteLine.png" /></button>
                        </div>
                        <div class="col-auto colmenubutton">
                            <button class="menubutton">Boton</button>
                        </div>
                    </div>
                    <div class="row justify-content-md-center rowmenubuttons">
                        <div class="col-auto colmenubutton">
                            <button class="menubutton">Boton</button>
                        </div>
                        <div class="col-auto colmenubutton">
                            <button class="menubutton">Boton</button>
                        </div>
                    </div>
                    <div class="row justify-content-md-center rowmenubuttons">
                        <div class="col-auto colmenubutton">
                            <button class="menubutton">Boton</button>
                        </div>
                        <div class="col-auto colmenubutton">
                            <button class="menubutton">Boton</button>
                        </div>
                    </div>
                    <div class="row justify-content-md-center rowmenubuttons">
                        <div class="col-auto">
                            <button @onclick="checkButtonCategoriasClicked" class="menubutton categorybutton">Categorías</button>
                            @*<button class="menubutton categorybutton">Categorías</button>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*@if (ldocumentoFromGrid != null)
            {
                <p>@ldocumentoFromGrid.ldoc_id</p>
            }*@
        @*<ListButton></ListButton>*@

        @*llamamos al teclado numérico*@

        @*@if (numMesa != 0 || categoriasClicked)*@
        @if (numMesa != 0)
        {
            <ListButtonCategorias buttonCategoriasClicked="@isButtonCategoriasClicked"></ListButtonCategorias>
        }
        else
        {
            <Numpad numMesaToIndex="obtenerNumMesa"></Numpad>
        }

        @*<p>@continueFromSon</p>
            <DialogContinueOperation continueToFather="obtenerSiContinue" headerMensaje="@headerMensaje" mensaje="@mensaje"></DialogContinueOperation>*@
        <DialogInfo isDialogVisible="@isDialogInfoVisible" headerMensaje="@headerMensaje" mensaje="@mensaje"></DialogInfo>

        <footer class="footer">
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton" @onclick="LogoutUserRequest">Salir</button>
            </div>
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton">Boton</button>
            </div>
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton">Boton</button>
            </div>
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton">Boton</button>
            </div>
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton">Boton</button>
            </div>
            <div class="col-auto contenedornavbutton">
                <p class="visormesa">Mesa nº @numMesa</p>
            </div>
        </footer>
    </Authorized>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <p>No has iniciado sesión</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    // url que apunta a la api
    public string Url = "https://localhost:44322";

    // respuesta recibe si ha habido éxito en la solicitud, mensaje si fuese necesario y los datos solicitados
    Respuesta<List<Documentos>> oRespuestaDocumentos = new Respuesta<List<Documentos>>();

    // rendija/tabla en la que se muestran los artículos
    Grid grid;
    //variable en la que se almacena el número de mesa que obtenemos de Numpad
    private int numMesa;
    //línea de documento (artículo) que recibimos del componente grid
    Ldocumentos ldocumentoFromGrid;
    //lista de artículos correspondiente a la mesa
    public IEnumerable<Documentos> DocumentosEnum { get; set; }
    //precio total de los artículos de la mesa
    private double precioTotal = 0;
    // declara el valor visible del componente dialog en false
    private bool isDialogInfoVisible = false;
    // boolean que controla la visibilidad de las categorías
    private bool isButtonCategoriasClicked = false;
    string nombreUsuario = "";

    //private bool categoriasClicked = false;

    // variable mensaje del popup (body)
    private string mensaje = "";
    // variable mensaje del popup (header)
    private string headerMensaje = "";
    // boolean que recibe index del componente dialog para saber si continuar con la operación
    private bool continueFromSon;

    protected override async Task OnInitializedAsync()
    {
        // se almacena en authState el usuario actual
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // si no hay usuario o si el usuario no se ha identificado, es redirigido a login
        if (user.Identity == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async void obtenerNumMesa(int num)
    {
        //almacenamos en numMesa el valor recibido en num, el cual Index recibe de Numpad
        numMesa = num;
        await getDocumentos();
        await getPrecio();
        //necesario para que el componente grid sepa que el objeto que recibe como parámetro ha cambiado y así actualizarse
        StateHasChanged();
    }

    //obtiene la lista con todos los artículos de la mesa
    public async Task getDocumentos()
    {
        //almacenamos en oRespuesta la respuesta que recibimos de la api
        oRespuestaDocumentos = await Http.GetFromJsonAsync<Respuesta<List<Documentos>>>(Url + "/api/Mesa/" + numMesa);
        // asigna a la variable false para indicar que no es visible, a la vez que la variable se asigna al parámetro del dialog
        isDialogInfoVisible = false;
        // notifica al componente dialog que sus parametros han cambiado, para que se actualice
        StateHasChanged();
        // entra en el if si no hubo éxito (no existe la mesa especificada)
        if (oRespuestaDocumentos.Exito == 0)
        {
            // asigna true a la variable para que se muestre el dialog
            isDialogInfoVisible = true;
            // se asigna a mensaje el mensaje de error recibido de la respuesta y el número de mesa en concreto
            mensaje = oRespuestaDocumentos.Mensaje + " - " + numMesa;
            // una vez se muestra el mensaje, se asignan los valores por defecto
            numMesa = 0;
            precioTotal = 0;
            DocumentosEnum = null;
            // indica a los componentes hijos que sus valores han cambiado para que se actualicen
            StateHasChanged();
        }
        else
        {
            //almacenamos los datos de la respuesta en DocumentosEnum
            DocumentosEnum = (IEnumerable<Documentos>)oRespuestaDocumentos.Data;
        }
    }

    //public async Task deleteDocumento(int mesaCode)
    //{
    //    bool confirmar = await JsRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro?");
    //    if (confirmar)
    //    {
    //        await ServiceEliminarMesa.BorrarMesa(numMesa);
    //    }
    //}

    private async Task getPrecio()
    {
        //obtenemos el precio total de la mesa solo si hubo éxito en la respuesta y hay datos en ella
        if (oRespuestaDocumentos.Exito == 1 && oRespuestaDocumentos.Data != null)
        {
            precioTotal = oRespuestaDocumentos.Data[0].doc_total;
            precioTotal = Math.Round(precioTotal, 2);
        }
    }

    //void obtenerLdocumentoFromGrid(Ldocumentos ldocumento)
    //{
    //    ldocumentoFromGrid = ldocumento;
    //}

    // variable que obtiene información de dialog (boolean para continuar o no)
    private async void obtenerSiContinue(bool x)
    {
        //almacenamos en numMesa el valor recibido en num, el cual Index recibe de Numpad
        continueFromSon = x;
        StateHasChanged();
    }

    // notifica que se ha clicado Categorías al componente que lista las categorías
    private async Task checkButtonCategoriasClicked()
    {
        isButtonCategoriasClicked = !isButtonCategoriasClicked;
        StateHasChanged();
    }

    private async Task LogoutUserRequest()
    {
        // llama a LogOutAsync del servicio UserService, el cual se encarga de cerrar la sesión
        await ServiceProvider.Get<UserService>().LogoutAsync();
        // una vez cierra la sesión, redirige a la página principal
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = await sessionStorage.GetItemAsync<string>("usuario");
        if (user != null)
        {
            // Convertir de Json a objeto
            Usuarios usuario = JsonConvert.DeserializeObject<Usuarios>(user);
            nombreUsuario = usuario.user_nom;
            if (firstRender)
            {
                StateHasChanged();
            }
        }
    }
}