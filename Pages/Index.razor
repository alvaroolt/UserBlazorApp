@page "/index"
@*hacemos referencia a los componentes*@
@using UserBlazorApp.components;
@using WebServiceApiRest.Models;
@using WebServiceApiRest.Models.Response;
@using System.Collections;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<AuthorizeView>
    <Authorized>
        <div class="contenedorgridandmenubuttons">
            <div class="contenedorgrid">
                <Grid documento="DocumentosEnum" ldocumentoToIndex="obtenerLdocumentoFromGrid"></Grid>
                @*<Grid documento="DocumentosEnum"></Grid>*@
            </div>
            <div class="contenedormenubuttons">
                <div class="container border">
                    <div class="contenedorvisores">
                        @*<p class="visorprecio">@nombreUsuario</p>*@
                        @*<p class="visorprecio">@nombreTerminal</p>*@
                        @*<p>Cookie: @msgcookie</p>*@
                        <p class="visorprecio">@precioTotal€</p>
                    </div>
                    <div class="row justify-content-md-center rowmenubuttons">
                        <div class="col-auto colmenubutton">
                            <button class="menubutton"><img class="menuimg" src="images/nota.png" /></button>
                        </div>
                        <div class="col-auto colmenubutton">
                            <button class="menubutton"><img class="menuimg" src="images/pagar.png" /></button>
                        </div>
                    </div>
                    <div class="row justify-content-md-center rowmenubuttons">
                        <div class="col-auto colmenubutton">
                            @*evitar el ~/ ya que no muestra la imagen correctamente*@
                            <button class="menubutton" @onclick="deleteLineaDocumento"><img class="menuimg" src="images/deleteLinea.png" /></button>
                        </div>
                        <div class="col-auto colmenubutton">
                            <button class="menubutton" @onclick="deleteDocumento"><img class="menuimg" src="images/deleteDocumento.png" /></button>
                        </div>
                    </div>
                    <div class="row justify-content-md-center rowmenubuttons">
                        <div class="col-auto colmenubutton">
                            <button class="menubutton">Trasp. Mesa</button>
                        </div>
                        <div class="col-auto colmenubutton">
                            <button class="menubutton" @onclick="showNumpadAgain"><img class="menuimg" src="images/salonangel.png" /></button>
                        </div>
                    </div>
                    <div class="row justify-content-md-center rowmenubuttons">
                        <div class="col-auto">
                            <button @onclick="checkButtonCategoriasClicked" class="menubutton categorybutton backgroundblue">Categorías</button>
                            @*<button class="menubutton categorybutton">Categorías</button>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*@if (ldocumentoFromGrid != null)
        {
            <p>Id de linea: @ldocumentoFromGrid.ldoc_id</p>
        }*@
        @*<ListButton></ListButton>*@

        @*llamamos al teclado numérico*@

        @*@if (numMesa != 0 || categoriasClicked)*@
        @*@if (idArticulo != 0)
            {
                <p>Id del articulo: @idArticulo</p>
            }*@
        @if (numMesa != 0)
        {
            if (ldocumentoFromGrid != null)
            {
                <NumpadLineas cantidadToIndex="obtenerCantidadLinea" precioToIndex="obtenerPrecioLinea"></NumpadLineas>
                @*<p>@numCantidad</p>*@
            }
            else
            {
                <ListButtonCategorias buttonCategoriasClicked="@isButtonCategoriasClicked" idArticuloToFather="obtenerIdArticuloFromSon"></ListButtonCategorias>
            }
        }
        else
        {
            <Numpad numMesaToIndex="obtenerNumMesa"></Numpad>
        }
        @*<NumpadLineas cantidadToIndex="obtenerCantidadLinea"></NumpadLineas>
            <p>@numCantidad</p>*@

        <DialogContinue isDialogVisible="@isDialogContinueVisible" continueToFather="continueOperation" headerMensaje="@headerMensaje" mensaje="@mensaje"></DialogContinue>
        <DialogInfo isDialogVisible="@isDialogInfoVisible" headerMensaje="@headerMensaje" mensaje="@mensaje"></DialogInfo>

        <footer class="footer">
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton" @onclick="LogoutUserRequest"><img class="menuimg" src="images/salir.png" /></button>
            </div>
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton"><img class="menuimg" src="images/masmenos.png" /></button>
            </div>
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton"></button>
            </div>
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton"></button>
            </div>
            <div class="col-auto contenedornavbutton">
                <button class="btn btn-primary p-4 rounded-0 navbutton"></button>
            </div>
            <div class="col-auto contenedornavbutton">
                <p class="visormesa">Mesa: @numMesa</p>
            </div>
        </footer>
    </Authorized>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <p>No has iniciado sesión</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    // url que apunta a la api
    public string Url = "https://localhost:44322";

    // respuesta recibe si ha habido éxito en la solicitud, mensaje si fuese necesario y los datos solicitados
    Respuesta<List<Documentos>> oRespuestaDocumentos = new Respuesta<List<Documentos>>();

    // rendija/tabla en la que se muestran los artículos
    Grid grid;
    //variable en la que se almacena el número de mesa que obtenemos de Numpad
    private int numMesa;
    //línea de documento (artículo) que recibimos del componente grid
    Ldocumentos ldocumentoFromGrid;
    //lista de artículos correspondiente a la mesa
    public IEnumerable<Documentos> DocumentosEnum { get; set; }
    //precio total de los artículos de la mesa
    private decimal precioTotal = 0;
    // declara el valor visible del componente dialog en false
    private bool isDialogInfoVisible = false;
    // boolean que controla la visibilidad de las categorías
    private bool isButtonCategoriasClicked = false;
    string nombreUsuario = "";
    string nombreTerminal = "";
    private string msgcookie;
    Terminal terminalActual { get; set; }
    private int docId = 0;
    private bool isDialogContinueVisible = false;
    private int idArticulo = 0;
    private int numCantidad = 0;

    // variable mensaje del popup (body)
    private string mensaje = "";
    // variable mensaje del popup (header)
    private string headerMensaje = "";
    // boolean que recibe index del componente dialog para saber si continuar con la operación
    private bool continueFromSon;

    protected override async Task OnInitializedAsync()
    {
        // se almacena en authState el usuario actual
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // si no hay usuario o si el usuario no se ha identificado, es redirigido a login
        if (user.Identity == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }

        msgcookie = await localStorage.GetItemAsync<string>("idTerminal");

        string s = String.Format("{0:N2}", precioTotal);
        precioTotal = Convert.ToDecimal(s);
    }

    private async void obtenerNumMesa(int num)
    {
        isDialogInfoVisible = false;
        //almacenamos en numMesa el valor recibido en num, el cual Index recibe de Numpad
        numMesa = num;

        await getDocumentos();
        await getPrecio();
        //NECESARIO PARA ACTUALIZAR GRID
        StateHasChanged();
    }

    private async void obtenerCantidadLinea(int num)
    {
        isDialogInfoVisible = false;
        ldocumentoFromGrid.ldoc_cantidad = num;

        await Http.PutAsJsonAsync<Ldocumentos>(Url + "/api/Ldocumento", ldocumentoFromGrid);
        ldocumentoFromGrid = null;
        await getDocumentos();
        await getPrecio();
        StateHasChanged();
    }

    private async void obtenerPrecioLinea(int num)
    {
        isDialogInfoVisible = false;
        ldocumentoFromGrid.ldoc_importe_pvp = num;

        await Http.PutAsJsonAsync<Ldocumentos>(Url + "/api/Ldocumento", ldocumentoFromGrid);
        ldocumentoFromGrid = null;
        await getDocumentos();
        await getPrecio();
        StateHasChanged();
    }

    //obtiene la lista con todos los artículos de la mesa
    public async Task getDocumentos()
    {
        //almacenamos en oRespuesta la respuesta que recibimos de la api
        oRespuestaDocumentos = await Http.GetFromJsonAsync<Respuesta<List<Documentos>>>(Url + "/api/Mesa/" + numMesa + "/" + terminalActual.ter_id);

        // asigna a la variable false para indicar que no es visible, a la vez que la variable se asigna al parámetro del dialog
        isDialogInfoVisible = false;
        // notifica al componente dialog que sus parametros han cambiado, para que se actualice
        //StateHasChanged();
        // entra en el if si no hubo éxito (no existe la mesa especificada)
        if (oRespuestaDocumentos.Exito == 0)
        {
            // asigna true a la variable para que se muestre el dialog
            isDialogInfoVisible = true;
            // se asigna a mensaje el mensaje de error recibido de la respuesta y el número de mesa en concreto
            mensaje = oRespuestaDocumentos.Mensaje;
            // una vez se muestra el mensaje, se asignan los valores por defecto
            numMesa = 0;
            precioTotal = 0;
            DocumentosEnum = null;
            // ACTUALIZA GRID
            //StateHasChanged();
        }
        else
        {
            docId = (int)oRespuestaDocumentos.Data[0].doc_id;

            //almacenamos los datos de la respuesta en DocumentosEnum
            DocumentosEnum = (IEnumerable<Documentos>)oRespuestaDocumentos.Data;
            await localStorage.SetItemAsync("LSdocumento", DocumentosEnum);
            //IEnumerable<Documentos> x = await localStorage.GetItemAsync<IEnumerable<Documentos>>("LSdocumento");
        }
    }

    public async Task deleteDocumento()
    {
        if (DocumentosEnum != null)
        {
            isDialogContinueVisible = true;
            headerMensaje = "Aviso";
            mensaje = "Estás a punto de borrar el documento de la mesa " + numMesa + ". ¿Deseas continuar?";
            //StateHasChanged();
        }
        else
        {
            isDialogInfoVisible = true;
            headerMensaje = "Error";
            mensaje = "Introduce una mesa";
        }
    }

    public async Task deleteLineaDocumento()
    {
        if (oRespuestaDocumentos.Exito == 1 && ldocumentoFromGrid != null)
        {
            await Http.DeleteAsync(Url + "/api/Ldocumento/" + ldocumentoFromGrid.ldoc_id + "/" + ldocumentoFromGrid.ldoc_art_id + "/" + numMesa);
            await getDocumentos();
            await getPrecio();

            ldocumentoFromGrid = null;
            StateHasChanged();
        }
        else
        {
            isDialogInfoVisible = true;
            headerMensaje = "Error";
            mensaje = "Selecciona una línea que eliminar";
        }
    }

    private async Task getPrecio()
    {
        //obtenemos el precio total de la mesa solo si hubo éxito en la respuesta y hay datos en ella
        if (oRespuestaDocumentos.Exito == 1 && oRespuestaDocumentos.Data != null)
        {
            precioTotal = Convert.ToDecimal(oRespuestaDocumentos.Data[0].doc_total);
            //precioTotal = Math.Round(precioTotal, 2);
            string s = String.Format("{0:N2}", precioTotal);
            precioTotal = Convert.ToDecimal(s);
        }
    }

    void obtenerLdocumentoFromGrid(Ldocumentos ldocumento)
    {
        isDialogInfoVisible = false;
        ldocumentoFromGrid = ldocumento;
    }


    private async Task continueOperation(bool boolContinueOperation)
    {
        isDialogContinueVisible = false;
        isDialogInfoVisible = false;
        StateHasChanged();

        if (oRespuestaDocumentos.Exito == 1)
        {

            if (boolContinueOperation)
            {
                await Http.DeleteAsync(Url + "/api/Mesa/" + docId);
                oRespuestaDocumentos = null;
                DocumentosEnum = null;
                //await getPrecio();
                precioTotal = 0;
                string s = String.Format("{0:N2}", precioTotal);
                precioTotal = Convert.ToDecimal(s);
                StateHasChanged();
            }

        }
        else
        {
            // asigna true a la variable para que se muestre el dialog
            isDialogInfoVisible = true;
            // se asigna a mensaje el mensaje de error recibido de la respuesta y el número de mesa en concreto
            mensaje = "Selecciona una mesa para eliminar";
            // indica a los componentes hijos que sus valores han cambiado para que se actualicen
            StateHasChanged();
        }

        StateHasChanged();

    }

    // notifica que se ha clicado Categorías al componente que lista las categorías
    private async Task checkButtonCategoriasClicked()
    {
        isButtonCategoriasClicked = true;
        //StateHasChanged();
    }

    private async Task LogoutUserRequest()
    {
        isDialogInfoVisible = true;
        if (numMesa == 0)
        {
            // llama a LogOutAsync del servicio UserService, el cual se encarga de cerrar la sesión
            await ServiceProvider.Get<UserService>().LogoutAsync();

            await updateTerminal(terminalActual, 0);

            // una vez cierra la sesión, redirige a la página principal
            NavigationManager.NavigateTo("/");
        }
        else
        {
            headerMensaje = "Error";
            mensaje = "Guarda la mesa primero para cerrar la sesión";
            isDialogInfoVisible = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isButtonCategoriasClicked)
        {
            isButtonCategoriasClicked = false;
        }

        // recupera en user la información de usuario utilizando SessionStorage
        var user = await sessionStorage.GetItemAsync<string>("usuario");
        terminalActual = await sessionStorage.GetItemAsync<Terminal>("terminal");

        if (user != null)
        {
            // Convertir de Json a objeto
            Usuarios usuario = JsonConvert.DeserializeObject<Usuarios>(user);
            Terminal terminal = await sessionStorage.GetItemAsync<Terminal>("terminal");

            nombreUsuario = usuario.user_nom;
            nombreTerminal = terminal.ter_nom;
            if (firstRender)
            {
                StateHasChanged();
            }
        }
    }

    private async Task updateTerminal(Terminal ter, int bloq)
    {
        ter.ter_bloqueado = bloq;
        await Http.PutAsJsonAsync<Terminal>(Url + "/api/Terminal", ter);
    }

    private async Task showNumpadAgain()
    {
        if (oRespuestaDocumentos != null && oRespuestaDocumentos.Exito == 1)
        {
            await updateMesa(oRespuestaDocumentos.Data[0], 0);
        }

        oRespuestaDocumentos = new Respuesta<List<Documentos>>();
        numMesa = 0;
        ldocumentoFromGrid = null;
        DocumentosEnum = null;
        precioTotal = 0;
        isDialogInfoVisible = false;
        isDialogContinueVisible = false;
        docId = 0;
        isButtonCategoriasClicked = false;
        idArticulo = 0;
    }

    // método utilizado para bloquear o desbloquear el documento/mesa
    private async Task updateMesa(Documentos doc, int bloq)
    {
        doc.doc_bloqueado = bloq;

        if (doc.listdoc == null || doc.listdoc.Count != 0)
        {
            await Http.PutAsJsonAsync<Documentos>(Url + "/api/Mesa", doc);
        }
        else
        {
            await Http.DeleteAsync(Url + "/api/Mesa/" + docId);
        }

    }

    private async void obtenerIdArticuloFromSon(int num)
    {
        idArticulo = num;

        ArrayList paramList = new ArrayList();
        paramList.Add(idArticulo);
        paramList.Add(numMesa);
        paramList.Add(terminalActual.ter_id);
        await Http.PostAsJsonAsync(Url + "/api/Ldocumento", paramList);
        await getDocumentos();
        await getPrecio();
        StateHasChanged();
    }
}