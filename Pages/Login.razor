@*fichero raiz del proyecto*@
@page "/"

@using UserBlazorApp.components;
@using WebServiceApiRest.Models;
@using WebServiceApiRest.Models.Response;
@using System.Net.Http.Json;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@*@inject ICookie cookie*@

<div class="contenedornumpadlogin">
    <div class="contenedorvisornumpad">
        <label for="visornumpad">Iniciar sesión</label>
        @*<p>Id del terminal almacenado en la cookie: @idTerminalLocalStorage</p>*@
        <input type="text" id="visornumpad" value="@value" disabled />
    </div>
    <div class="numpadLogin">
        <div class="row justify-content-md-center rownumpadLogin">
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(7)">7</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(8)">8</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(9)">9</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpadLogin">
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(4)">4</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(5)">5</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(6)">6</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpadLogin">
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(1)">1</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(2)">2</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(3)">3</button>
            </div>
        </div>
        <div class="row justify-content-md-center rownumpadLogin">
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(0)">0</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(-2)">C</button>
            </div>
            <div class="colnumpad">
                <button class="numpadbutton" @onclick="e => typeKey(-1)"><img class="menuimgLogin" src="images/flechazulizquierda.png" /></button>
            </div>
        </div>
    </div>
    <div class="formLogin">
        <div class="formSelectLoginConfirm">
            <label for="terminales">Selecciona terminal: </label>
            <select name="terminales" id="terminales" @onchange="OnSelectTerminal">
                @if (TerminalesEnum != null)
                {
                    foreach (var fterminal in TerminalesEnum)
                    {
                        // si el id de terminal almacenado en la cookie coincide con el id del terminal del foreach, entra al if
                        // mostrando el option como por defecto, y asignando ese id al terminal "actual"
                        //if (idTerminalLocalStorage != null)
                        //{
                        if (idTerminalLocalStorage == fterminal.ter_id)
                        {
                            <option selected="selected" value="@fterminal.ter_id">@fterminal.ter_nom</option>
                            terminal = TerminalesEnum.FirstOrDefault(x => x.ter_id == fterminal.ter_id);
                        }
                        else
                        {
                            <option value="@fterminal.ter_id">@fterminal.ter_nom</option>
                        }
                        //}
                    }

                }
            </select>
        </div>
        <div class="formButtonLoginConfirm">
            <button class="buttonLoginConfirm" @onclick="LoginUserRequest">Confirmar</button>
        </div>
    </div>
</div>
<DialogInfo isDialogVisible="@isDialogInfoVisible" headerMensaje="Error" mensaje="@mensaje"></DialogInfo>

@code {
    // variable que almacena el número que se escribe con los botones del teclado numérico
    private string value = "";
    public string Url = "https://localhost:44322";
    Respuesta<Usuarios> oRespuestaUsuarios = new Respuesta<Usuarios>();
    Usuarios usuario = new Usuarios();
    Respuesta<List<Terminal>> oRespuestaTerminales = new Respuesta<List<Terminal>>();
    public IEnumerable<Terminal> TerminalesEnum { get; set; }
    public Terminal terminal { get; set; }
    private bool isDialogInfoVisible = false;
    private string mensaje = "";
    // almacena el id del terminal de la cookie
    private int idTerminalLocalStorage;


    private void typeKey(int key)
    {
        switch (key)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                value += key.ToString().Trim();
                break;
            case -1:
                if (value.Length > 0)
                {
                    string newvalue = "";
                    newvalue = value.Remove(value.LastIndexOf("")).Trim();
                    value = newvalue;
                }
                break;
            case -2:
                value = "";
                break;
        }
    }

    private async Task LoginUserRequest()
    {
        if (value != "")
        {
            // obtiene el usuario de la bd según la contraseña enviada
            await getUsuarios(value);

            if (oRespuestaUsuarios.Exito == 1 && terminal != null)
            {
                // actualiza la lista de terminales, por si ha sido alterada la tabla de temrinales en el proceso de iniciar sesión
                await getTerminales();
                // se refresca el terminal actual, por si ha sido alterada la tabla de terminales en el proceso de iniciar sesión
                terminal = TerminalesEnum.FirstOrDefault(x => x.ter_id == terminal.ter_id);

                if (terminal.ter_bloqueado == 0 || (terminal.ter_bloqueado == 1 && idTerminalLocalStorage == terminal.ter_id))
                {
                    // llama al método de iniciar sesión del servicio UserService
                    await ServiceProvider.Get<UserService>().LoginAsync(usuario);

                    // actualiza el terminal para bloquearlo a otros usuarios
                    await updateTerminal(terminal, 1);

                    // guarda la información de usuario utilizando SessionStorage
                    await sessionStorage.SetItemAsync("usuario", usuario);
                    await sessionStorage.SetItemAsync("terminal", terminal);

                    NavigationManager.NavigateTo("/index");

                }
                else
                {
                    mensaje = "Selecciona un terminal que no esté en uso";
                    isDialogInfoVisible = true;
                    StateHasChanged();
                }
            }
            else if (terminal == null)
            {
                mensaje = "Selecciona un terminal correcto";
                isDialogInfoVisible = true;
                StateHasChanged();
            }
            else
            {
                mensaje = oRespuestaUsuarios.Mensaje;
                isDialogInfoVisible = true;
                StateHasChanged();
            }
        }
        else
        {
            mensaje = "Introduce el PIN";
            isDialogInfoVisible = true;
            StateHasChanged();
        }
    }

    private async Task LogoutUserRequest()
    {
        // llama a LogOutAsync del servicio UserService, el cual se encarga de cerrar la sesión
        await ServiceProvider.Get<UserService>().LogoutAsync();

        // actualiza el terminal para desbloquearlo a otros usuarios
        await updateTerminal(terminal, 1);

        // una vez cierra la sesión, redirige a la página principal
        NavigationManager.NavigateTo("/");
    }

    public async Task getUsuarios(string pass)
    {
        oRespuestaUsuarios = await Http.GetFromJsonAsync<Respuesta<Usuarios>>(Url + "/api/Usuarios/" + pass);
        isDialogInfoVisible = false;
        usuario = oRespuestaUsuarios.Data;
        StateHasChanged();
    }

    public async Task getTerminales()
    {
        //almacenamos en oRespuesta la respuesta que recibimos de la api
        oRespuestaTerminales = await Http.GetFromJsonAsync<Respuesta<List<Terminal>>>(Url + "/api/Terminal");

        // lista de terminales para mostrar en el select
        TerminalesEnum = (IEnumerable<Terminal>)oRespuestaTerminales.Data;
    }

    // el método es llamado cada vez que el select option de terminales es alterado (se clica en un option diferente)
    private async Task OnSelectTerminal(ChangeEventArgs e)
    {
        if (e.Value.ToString() != "0")
        {
            // obtiene el id del terminal seleccionado
            int idTerminal = int.Parse(e.Value.ToString());

            // compara el id con los de la BD, para encontrar el terminal deseado
            terminal = TerminalesEnum.FirstOrDefault(x => x.ter_id == idTerminal);

            // se crea una cookie que almacena el id del terminal
            //await cookie.SetValue("cookieTer", terminal.ter_id.ToString());
            await localStorage.SetItemAsync("idTerminal", terminal.ter_id.ToString());
        }
        else
        {
            terminal = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await getTerminales();
        //if (await localStorage.GetItemAsync<string>("idTerminal") == "")
        //{
        //    await localStorage.SetItemAsync("idTerminal", "1");
        //    idTerminalLocalStorage = await localStorage.GetItemAsync<string>("idTerminal");
        //    terminal = TerminalesEnum.FirstOrDefault(x => x.ter_id == 1);
        //}
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // recupera en user la información de usuario utilizando SessionStorage
        var user = await sessionStorage.GetItemAsync<string>("usuario");

        // si no hay cookie cookieTer, se le asigna el valor 1 por defecto, si no, se obtiene el valor de la cookie (id terminal)
        //var x = await localStorage.GetItemAsync<string>("idTerminal");
        if (await localStorage.GetItemAsync<string>("idTerminal") == null)
        {
            await localStorage.SetItemAsync("idTerminal", "1");
        }

        idTerminalLocalStorage = Int32.Parse(await localStorage.GetItemAsync<string>("idTerminal"));

        if (user != null)
        {
            // Convierte de Json a objeto y fuerza a que las variables que intervienen en la página se revisualicen
            usuario = JsonConvert.DeserializeObject<Usuarios>(user);
            //terminal = JsonConvert.DeserializeObject<Terminal>(ssterminal);
            //si es la primera vez que se llama a OnAfterRenderAsync, actualiza el componente
        }

        if (firstRender)
        {
            StateHasChanged();
        }
    }

    // método utilizado para bloquear o desbloquear el terminal
    private async Task updateTerminal(Terminal ter, int bloq)
    {
        ter.ter_bloqueado = bloq;
        await Http.PutAsJsonAsync<Terminal>(Url + "/api/Terminal", ter);
    }
}